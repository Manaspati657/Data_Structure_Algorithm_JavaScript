
ts page syntax
=================
1. Component Class (TS Syntax)

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-example',
  templateUrl: './example.component.html',
  styleUrls: ['./example.component.css']
})
export class ExampleComponent implements OnInit {
  title: string = 'Hello World';

  constructor() { }

  ngOnInit(): void {
    // Component initialization logic
  }
}

2. Service Class (TS Syntax)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ExampleService {
  private apiUrl = 'https://api.example.com/data';

  constructor(private http: HttpClient) { }

  getData(): Observable<any> {
    return this.http.get<any>(this.apiUrl);
  }
}
3. Module Class (TS Syntax)

@NgModule({
  declarations: [
    AppComponent,
    ExampleComponent
    //here we can add component, directive and pipes 
  ],
  imports: [
    BrowserModule,
    // any module we have to used their features here
  ],
  providers: [
    ExampleService,
    // any service , interceptor 
  ],
  bootstrap: [AppComponent] // initial component to load while application run
})
export class AppModule { }

4. Routing with Lazy Loading (TS Syntax)

const routes: Routes = [
  { path: '', loadChildren: () => import('./example/example.module').then(m => m.ExampleModule) }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

5. Reactive Form Creation (TS Syntax)

@Component({
  selector: 'app-form',
  templateUrl: './form.component.html'
})
export class FormComponent implements OnInit {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      username: ['', [Validators.required, Validators.maxLength(20)]],
      age: ['', [Validators.required, Validators.max(99)]]
    });
  }

  ngOnInit(): void {}

  onSubmit(): void {
    if (this.form.valid) {
      console.log(this.form.value);
    }
  }
}

<form [formGroup]="form" (ngSubmit)="onSubmit()">
  <label for="username">Username:</label>
  <input type="text" id="username" formControlName="username">

  <label for="age">Age:</label>
  <input type="number" id="age" formControlName="age">

  <button type="submit" [disabled]="form.invalid">Submit</button>
</form>

6. Template-Driven Form Setup (TS Syntax)

@Component({
  selector: 'app-tdf-form',
  templateUrl: './tdf-form.component.html'
})
export class TdfFormComponent {
  user = {
    name: '',
    age: null
  };

  onSubmit(form: any): void {
    console.log(form.value);
  }
}

7. API Service Methods (TS Syntax)


@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiUrl = 'https://api.example.com/data';

  constructor(private http: HttpClient) {}

  getData(): Observable<any> {
    return this.http.get<any>(this.apiUrl);
  }

  postData(data: any): Observable<any> {
    return this.http.post<any>(this.apiUrl, data, {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' })
    });
  }
}

8. API Service Call with `.subscribe()` (TS Syntax)**


@Component({
  selector: 'app-api',
  templateUrl: './api.component.html'
})
export class ApiComponent implements OnInit {

  constructor(private apiService: ApiService) {}

  ngOnInit(): void {
   getUserData();
  }
   getUserData(){
       this.apiService.getData().subscribe(
      (data) => {
        console.log('Data:', data);
      },
      (error) => {
        console.error('Error:', error);
      }
    );
    }
}


9. AuthGuard (TS Syntax)

**auth.guard.ts**:
```typescript
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {

  constructor(private router: Router) {}

  canActivate(): boolean {
    const isAuthenticated = /* logic to check authentication */;
    if (isAuthenticated) {
      return true;
    } else {
      this.router.navigate(['/login']);
      return false;
    }
  }
}

10. Custom Directive for Mouseover Styling (TS Syntax)

@Directive({
  selector: '[appMouseOverHighlight]'
})
export class MouseOverHighlightDirective {

  constructor(private el: ElementRef, private renderer: Renderer2) {}

  @HostListener('mouseenter') onMouseEnter() {
    this.renderer.setStyle(this.el.nativeElement, 'color', 'blue');
  }

  @HostListener('mouseleave') onMouseLeave() {
    this.renderer.removeStyle(this.el.nativeElement, 'color');
  }
}


11. Custom Pipe for Filtering Strings with Numbers (TS Syntax)


@Pipe({
  name: 'filterNumeric'
})
export class FilterNumericPipe implements PipeTransform {

  transform(value: string[]): string[] {
    return value.filter(str => /\d/.test(str));  // Filters strings that include numbers
  }
}

<!-- Assume strings is an array of strings -->
<div *ngFor="let item of strings | filterNumeric">
  {{ item }}
</div>
--- 

12. Create the Token Interceptor

import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from './auth.service'; // Make sure to have an AuthService to provide the token

@Injectable()
export class TokenInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    // Get the auth token from the service
    const authToken = this.authService.getToken();

    // Clone the request and add the authorization header if the token exists
    if (authToken) {
      const authReq = req.clone({
        setHeaders: {
          Authorization: `Bearer ${authToken}`
        }
      });
      return next.handle(authReq);
    }

    // If there's no token, proceed without modifying the request
    return next.handle(req);
  }
}


interceptor 
debouncetime method search api
filter,map, of , pipe - rxjs 

datatable implementation



html syntax
=========

1. Template-Driven Form (HTML Syntax)

In template-driven forms, you use Angular’s `[(ngModel)]` directive to bind form controls.

<form #form="ngForm" (ngSubmit)="onSubmit(form)">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" [(ngModel)]="user.name" required>

  <label for="age">Age:</label>
  <input type="number" id="age" name="age" [(ngModel)]="user.age" required>

  <button type="submit" [disabled]="form.invalid">Submit</button>
</form>


2. Reactive Form (HTML Syntax)

In reactive forms, you bind the form to the component’s `FormGroup` instance using `[formGroup]` and form controls with `formControlName`.

<form [formGroup]="form" (ngSubmit)="onSubmit()">
  <label for="username">Username:</label>
  <input type="text" id="username" formControlName="username">

  <label for="age">Age:</label>
  <input type="number" id="age" formControlName="age">

  <button type="submit" [disabled]="form.invalid">Submit</button>
</form>

3. For Loop (`*ngFor` Directive)

Use `*ngFor` to loop through an array in Angular templates.


<ul>
  <li *ngFor="let item of items; let i = index">
    {{ i + 1 }}. {{ item }}
  </li>
</ul>


4. If-Else (`*ngIf` Directive)

Use `*ngIf` to conditionally display elements. You can also specify an "else" template.


<div *ngIf="isLoggedIn; else loggedOut">
  <p>Welcome back, user!</p>
</div>
<ng-template #loggedOut>
  <p>Please log in.</p>
</ng-template>


5. Switch Case (`[ngSwitch]` Directive)**

Use `[ngSwitch]` for conditional rendering based on multiple cases.

<div [ngSwitch]="status">
  <p *ngSwitchCase="'success'">Operation was successful!</p>
  <p *ngSwitchCase="'error'">An error occurred.</p>
  <p *ngSwitchCase="'loading'">Loading...</p>
  <p *ngSwitchDefault>Please wait.</p>
</div>
```

---
